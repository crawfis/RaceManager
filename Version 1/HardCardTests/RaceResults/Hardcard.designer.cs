#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaceResults
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HardcardTestDatabase")]
	public partial class HardcardDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPassing(Passing instance);
    partial void UpdatePassing(Passing instance);
    partial void DeletePassing(Passing instance);
    partial void InsertTagReading(TagReading instance);
    partial void UpdateTagReading(TagReading instance);
    partial void DeleteTagReading(TagReading instance);
    #endregion
		
		public HardcardDataContext() : 
				base(global::RaceResults.Properties.Settings.Default.HardcardTestDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HardcardDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HardcardDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HardcardDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HardcardDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Passing> Passings
		{
			get
			{
				return this.GetTable<Passing>();
			}
		}
		
		public System.Data.Linq.Table<TagReading> TagReadings
		{
			get
			{
				return this.GetTable<TagReading>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passings")]
	public partial class Passing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PassingNumber;
		
		private string _Tag;
		
		private long _PassingTime;
		
		private System.Nullable<int> _ReadingNumber;
		
		private System.Nullable<int> _Lap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPassingNumberChanging(int value);
    partial void OnPassingNumberChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnPassingTimeChanging(long value);
    partial void OnPassingTimeChanged();
    partial void OnReadingNumberChanging(System.Nullable<int> value);
    partial void OnReadingNumberChanged();
    partial void OnLapChanging(System.Nullable<int> value);
    partial void OnLapChanged();
    #endregion
		
		public Passing()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassingNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PassingNumber
		{
			get
			{
				return this._PassingNumber;
			}
			set
			{
				if ((this._PassingNumber != value))
				{
					this.OnPassingNumberChanging(value);
					this.SendPropertyChanging();
					this._PassingNumber = value;
					this.SendPropertyChanged("PassingNumber");
					this.OnPassingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="NChar(24) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassingTime", DbType="BigInt NOT NULL")]
		public long PassingTime
		{
			get
			{
				return this._PassingTime;
			}
			set
			{
				if ((this._PassingTime != value))
				{
					this.OnPassingTimeChanging(value);
					this.SendPropertyChanging();
					this._PassingTime = value;
					this.SendPropertyChanged("PassingTime");
					this.OnPassingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingNumber", DbType="Int")]
		public System.Nullable<int> ReadingNumber
		{
			get
			{
				return this._ReadingNumber;
			}
			set
			{
				if ((this._ReadingNumber != value))
				{
					this.OnReadingNumberChanging(value);
					this.SendPropertyChanging();
					this._ReadingNumber = value;
					this.SendPropertyChanged("ReadingNumber");
					this.OnReadingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lap", DbType="Int")]
		public System.Nullable<int> Lap
		{
			get
			{
				return this._Lap;
			}
			set
			{
				if ((this._Lap != value))
				{
					this.OnLapChanging(value);
					this.SendPropertyChanging();
					this._Lap = value;
					this.SendPropertyChanged("Lap");
					this.OnLapChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TagReadings")]
	public partial class TagReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReadingNumber;
		
		private string _Tag;
		
		private long _Time;
		
		private System.Nullable<float> _SignalStrength;
		
		private System.Nullable<short> _Antenna;
		
		private System.Nullable<float> _Frequency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReadingNumberChanging(int value);
    partial void OnReadingNumberChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnTimeChanging(long value);
    partial void OnTimeChanged();
    partial void OnSignalStrengthChanging(System.Nullable<float> value);
    partial void OnSignalStrengthChanged();
    partial void OnAntennaChanging(System.Nullable<short> value);
    partial void OnAntennaChanged();
    partial void OnFrequencyChanging(System.Nullable<float> value);
    partial void OnFrequencyChanged();
    #endregion
		
		public TagReading()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReadingNumber
		{
			get
			{
				return this._ReadingNumber;
			}
			set
			{
				if ((this._ReadingNumber != value))
				{
					this.OnReadingNumberChanging(value);
					this.SendPropertyChanging();
					this._ReadingNumber = value;
					this.SendPropertyChanged("ReadingNumber");
					this.OnReadingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="Char(24) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="BigInt NOT NULL")]
		public long Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalStrength", DbType="Real")]
		public System.Nullable<float> SignalStrength
		{
			get
			{
				return this._SignalStrength;
			}
			set
			{
				if ((this._SignalStrength != value))
				{
					this.OnSignalStrengthChanging(value);
					this.SendPropertyChanging();
					this._SignalStrength = value;
					this.SendPropertyChanged("SignalStrength");
					this.OnSignalStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Antenna", DbType="SmallInt")]
		public System.Nullable<short> Antenna
		{
			get
			{
				return this._Antenna;
			}
			set
			{
				if ((this._Antenna != value))
				{
					this.OnAntennaChanging(value);
					this.SendPropertyChanging();
					this._Antenna = value;
					this.SendPropertyChanged("Antenna");
					this.OnAntennaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Real")]
		public System.Nullable<float> Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
